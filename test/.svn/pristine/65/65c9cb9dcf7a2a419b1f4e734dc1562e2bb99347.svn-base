<?php

namespace app\api\controller;

use app\api\model\ydxq\ScanBuyCart as ScanBuyCartModel;
use app\api\model\ydxq\Supplier;
use app\api\model\ydxq\ShopGoods as ShopGoodsModel;
use app\api\model\ydxq\Orders as OrdersModel;
use app\api\model\ydxq\OrdersGoods as OrdersGoodsModel;

use Think\Db;
use think\Exception;

class Orders extends BaseController
{
    private $scan_buy_cart_model;
    private $supplier_model;
    private $shop_goods_model;
    private $orders_model;
    private $orders_goods_model;

    public function __construct()
    {
        parent::__construct();
        $this->scan_buy_cart_model = new ScanBuyCartModel();
        $this->supplier_model = new Supplier();
        $this->shop_goods_model = new ShopGoodsModel();
        $this->orders_model = new OrdersModel();
        $this->orders_goods_model = new OrdersGoodsModel();
    }

    //创建一条订单
    public function create_order(){
        $param = $this->request_param;
        if(!isset($param['openid']) || !isset($param['goods']) || !isset($param['supplier_id'])){
            sdk_return('', 0, '参数缺失');
        }
        $openid = $param['openid'];//当前登录用户opendi
        $delivery_type = isset($param['delivery_type']) ? intval($param['delivery_type']) : 2;//配送方式  0：自提;1:商家配送;2:扫码购线下拿货
        $supplier_id = intval($param['supplier_id']);//所在店铺id
        //$goods = json_decode($param['goods'], true);//购物车商品信息
        $goods = $param['goods'];
        if(!is_array($goods) || !count($goods)){
            sdk_return('', 0, '无效的参数goods');
        }

        $goods_id = array_column($goods, 'goodsid');
        if(empty($goods_id)){
            sdk_return('', 0, '无效的参数goods');
        }

        //获取数据库商品信息
        $db_goods = $this->shop_goods_model->getAllListPro([['id', 'in', $goods_id]], ['id','title', 'smg_price', 'smg_total']);
        $tmp_goods = [];
        foreach ($db_goods as $k => $v){
            $tmp_goods[ $v['id'] ] = $v;
        }

        //获取当前用户加入购物车中的所有当前店铺商品
        $carts = $this->scan_buy_cart_model->getAllList(['openid'=>$openid, 'supplier_id'=>$supplier_id]);
        $tmp_carts = [];
        foreach ($carts as $k => $v){
            $tmp_carts[ $v['goodsid'] ] = $v;
        }

        //生成订单号
        $order_sn = $this->createNO( 'SMG');
        $orders = [
            'uniacid'           =>  4,
            'supplier_id'       =>  $supplier_id,//店铺id
            'delivery_type'     =>  $delivery_type,//配送方式
            'openid'            =>  $openid,//当前登录用户的openid
            'ordersn'           =>  $order_sn,//订单号
            'addressid'         =>  isset($param['addressid']) ? intval($param['addressid']) : '',
            'status'            =>  0,
            'remark'            =>  isset($param['remark']) ? trim($param['remark']) : '',
            'createtime'        =>  time(),
            'paytype'           =>  0,
        ];
        //验证商品信息
        $order_price = 0;//订单金额
        foreach ($goods as $k => $v){
            //验证数据库商品信息
            if(!isset($tmp_goods[ $v['goodsid'] ])){
                sdk_return('', 0, '无效的商品id:'. $v['goodsid']);
            }
            $goods_info = $tmp_goods[ $v['goodsid'] ];

            //验证购物车商品信息
            if(!isset($tmp_carts[ $v['goodsid'] ])){
                sdk_return('', 0, '购物车中不存在商品:'.$goods_info['title']);
            }
            $cart_info = $tmp_carts[ $v['goodsid'] ];

            //验证库存
            if($cart_info['total'] > $goods_info['smg_total']){
                sdk_return('', 0, '商品' . $goods_info['title'] . '库存不足');
            }

            $goods_price = $goods_info['smg_price'] * $cart_info['total'];

            //获取订单金额，此处购物车商品数量取自数据库中的数量
            $order_price += $goods_price;

            //生成订单商品表数据
            $order_goods[] = [
                'goodsid'       =>  $v['goodsid'],//商品id
                'price'         =>  $goods_price,//当前商品价格
                'total'         =>  $cart_info['total'],//当前商品购买数量
                'createtime'    =>  time(),
                'openid'        =>  $openid,
                'realprice'     =>  $goods_price,
                'oldprice'      =>  $goods_price
            ];
        }

        $orders['price'] = $orders['goodsprice'] = $order_price;//订单金额

        Db::startTrans();//开启事务

        //数据插入到订单主表
        $order_id = $this->orders_model->insertInfo($orders);

        foreach ($order_goods as $k => $v){
            $order_goods[ $k ]['orderid'] = $order_id;//订单id
        }

        //数据插入到订单商品表
        $orders_goods_rst = $this->orders_goods_model->insertMore($order_goods);

        //清空购物车
        $clear_rst = $this->scan_buy_cart_model->clearSuppCart($openid, $supplier_id);

        if(!$order_id || !$orders_goods_rst || !$clear_rst){
            Db::rollback();//事务回滚
            sdk_return('', 0, '服务器错误，请稍后重试');
        }

        Db::commit();//事务提交

        sdk_return(['orderid'=>$order_id, 'ordersn'=>$order_sn], 1, '创建订单成功');
    }

    //生成订单号
    public function createNO($prefix){
        $billno = date('YmdHis') . $this->random(6, true);

        while (1) {
            $count = $this->orders_model->getCount(['ordersn'=>$billno]);
            if ($count <= 0) {
                break;
            }
            $billno = date('YmdHis') . $this->random(6, true);
        }

        return $prefix . $billno;
    }

    public function random($length, $numeric = false) {
        $seed = base_convert(md5(microtime() . $_SERVER['DOCUMENT_ROOT']), 16, $numeric ? 10 : 35);
        $seed = $numeric ? (str_replace('0', '', $seed) . '012340567890') : ($seed . 'zZ' . strtoupper($seed));
        if ($numeric) {
            $hash = '';
        } else {
            $hash = chr(rand(1, 26) + rand(0, 1) * 32 + 64);
            $length--;
        }
        $max = strlen($seed) - 1;
        for ($i = 0; $i < $length; $i++) {
            $hash .= $seed{mt_rand(0, $max)};
        }
        return $hash;
    }

    //订单详情接口
    public function detail(){
        $param = $this->request_param;
        if(!isset($param['openid']) || !isset($param['order_id'])){
            sdk_return('', 0, '参数缺失');
        }

        $order_id = intval($param['order_id']);
        $openid = $param['openid'];

        //获取订单详情
        $order_info = $this->orders_model->getInfoPro(['id'=>$order_id, 'openid'=>$openid], ['id','ordersn','price','status','createtime','supplier_id']);
        if(empty($order_info)){
            sdk_return('', 0, '订单信息错误');
        }

        //获取店铺信息
        $supplier_info = $this->supplier_model->getInfoPro(['id'=>$order_info['supplier_id']], ['name sup_name','address']);

        $order_info = array_merge($order_info, $supplier_info);

        //获取订单商品列表
        $order_goods = $this->orders_goods_model->getAllListPro(['orderid'=>$param['order_id']], ['goodsid', 'orderid', 'price', 'total']);

        //获取订单商品详情
        foreach ($order_goods as $k => $v){
            $goods_info = $this->shop_goods_model->getInfoPro(['id'=>$v['goodsid']], ['title','thumb']);
            $goods_info['thumb'] = imgSrc($goods_info['thumb']);
            $v['unit_price'] = $v['price'] / $v['total'];
            $order_goods[ $k ] = array_merge($v, $goods_info);
        }

        $order_info['goods_num'] = count($order_goods);
        $order_info['goods'] = $order_goods;

        sdk_return($order_info, 1, '获取订单详情成功');
    }

    /**
     * 判断订单是否超过取消订单的时间（判断超时）
     */
    public function cancelTime(){
        $param = $this->request_param;
        $order_id = !empty($param['order_id']) ? $param['order_id'] : sdk_return('',6,'缺少参数');
        //查询当前订单创建时间
        $order_time = Db::connect('db_mini_mall')->table('ims_ewei_shop_order')->field('createtime')->where([['id','=',$order_id]])->find();
        if(!empty($order_time)){
            $out_time = $order_time['createtime'] + ((60*60)*2);
//            $out_time = $order_time['createtime'] + ((60));
            if($out_time <= time()){
                sdk_return('',6,'订单已超时暂不可取消，请联系业务员');
            }
        }else{
            sdk_return('',6,'订单错误');
        }
        sdk_return('',1,'可以取消');
    }

    /**
     * 取消订单
     * auth：maic
     */
    public function cancelOrder(){
        $param = $this->request_param;
        $order_id = !empty($param['order_id']) ? $param['order_id'] : sdk_return('',6,'缺少参数');
        $cancel_note = !empty($param['cancel_note']) ? $param['cancel_note'] : sdk_return('',6,'缺少参数');
        //查询当前订单创建时间
        $order_time = Db::connect('db_mini_mall')->table('ims_ewei_shop_order')->field('createtime,openid,supplier_id,coupon_id')->where([['id','=',$order_id]])->find();
        if(!empty($order_time)){
            $out_time = $order_time['createtime'] + ((60*60)*2);
//            $out_time = $order_time['createtime'] + ((60));
            if($out_time <= time()){
                sdk_return('',6,'订单已超时暂不可取消，请联系业务员');
            }
        }else{
            sdk_return('',6,'订单错误');
        }
        $ret = Db::connect('db_mini_mall')->table('ims_ewei_shop_order')->where('id', $order_id)->update(array('status' => -1, 'canceltime' => time(),'cancel_note' => $cancel_note));
        if(!empty($ret)){
            //取消正常订单之后，将关联的金币兑换订单更改为未关联状态，就是把shop_order_id置为0，并查找当日是否有最近的订单
            $start_time = strtotime(date('Y-m-d'));
            $end_time = strtotime("+1 day", $start_time);
            //查询当日订单
            $shop_order = Db::connect('db_mini_mall')->table('ims_ewei_shop_order')->field('id')->where('status = 0 and supplier_id = '.$order_time['supplier_id'].' and openid = "'.$order_time['openid'].'" and createtime > '.$start_time.' and createtime < '.$end_time)->order('createtime','desc')->find();
            $shop_order_id = 0;
            if(!empty($shop_order)){
                $shop_order_id = $shop_order['id'];
            }
            $update = null;
            $update['shop_order_id'] = $shop_order_id;
            Db::connect('db_mini_mall')->table('ims_ewei_shop_exchange_order')->where('is_dist_order = 1 and shop_order_id = '.$order_id)->update($update);
            //退回优惠券
            Db::connect('db_mini_mall')->table('ims_ewei_shop_member_coupon')->where('order_id = '.$order_id)->update(['coupon_status'=>2,'order_id'=>0,'order_time'=>0]);
            if(!empty($order_time['coupon_id'])){
                $msg = '取消成功，优惠券已退回';
            }else{
                $msg = '取消成功';
            }
            sdk_return('',1,$msg);
        }else{
            sdk_return('',6,'取消失败');
        }
    }

    /**
     * 订单详情
     * auth:maic
     */
    public function orderDetail(){
        $param = $this->request->param();
        $order_id = !empty($param['order_id']) ? $param['order_id'] : sdk_return('',6,'参数错误');
        //查询订单信息
        $order_data = Db::connect('db_mini_mall')->table('ims_ewei_shop_order')->alias('a')->leftJoin('ims_yd_supplier b','a.supplier_id = b.id')->field('a.*,b.name as sup_name')->where('a.id = '.$order_id)->find();
        if(!empty($order_data)){
            $realname = '';//接收人真实姓名
            $phone = '';//接收人真实联系电话
            $address = '';//接收人配送地址
            $delivery_type = '店铺自提';
            if ($order_data['delivery_type'] == 1) {
                $delivery_type = '货到付款';
                try {
                    $address = unserialize($order_data['address']);
                } catch (Exception $exceptione) {
                    $address = '';
                }
                if (!empty($address)) {
                    $realname = $address['realname'];//接收人真实姓名
                    $phone = $address['mobile'];//接收人真实联系电话
                    $address = $address['address'].$address['street'];//接收人配送地址
                }
                if($order_data['order_type'] == 1){
                    $delivery_type = '送货上门';
                }
            }
            $status = $order_data['status'];
            if($order_data['order_type'] == 2){
                if($order_data['status'] == 1){
                    $status = 3;
                }
            }
            //判断订单是否可以取消
            $order_time = $order_data['createtime'];
            $is_cancel = 0;//不可以取消
            if(($status == 0) || ($status == 2)){
                $out_time = $order_time + ((60*60)*2);
                if($out_time > time()){
                    $is_cancel = 1;//可以取消
                }
            }
            //查询商品信息
            $order_goods_arr = array();
            $order_goods = Db::connect('db_mini_mall')->table('ims_ewei_shop_order_goods')->alias('a')->leftJoin('ims_ewei_shop_goods b','a.goodsid = b.id')->field('b.title,b.thumb,a.realprice,a.price,a.total')->where('a.total > 0 and a.orderid = '.$order_id)->select();
            $goods_sum = 0;//全部商品数量
            if(!empty($order_goods)){
                foreach ($order_goods as $one_goods){
                    $one_goods['thumb'] = imgSrc($one_goods['thumb']);
                    $goods_sum = $one_goods['total'] + $goods_sum;
                    $order_goods_arr[] = $one_goods;
                }
            }
            //判断当前订单是否是孙宇店铺类型订单
            $supplier_data = Db::connect('db_mini_mall')->table('ims_yd_supplier')->where('id = '.$order_data['supplier_id'])->field('is_dist')->find();
            $is_dist = !empty($supplier_data['is_dist']) ? $supplier_data['is_dist'] : 0;//1:是经销商，0：不是
            $return_data = [
                'address' => $address,
                'realname' => $realname,
                'phone' => $phone,
                'order_sn' => $order_data['ordersn'],
                'create_time' => !empty($order_time) ? date('Y-m-d H:i:s',$order_time) : '----',
                'pay_time' => !empty($order_data['paytime']) ? date('Y-m-d H:i:s',$order_data['paytime']) : '----',
                'finishtime' => !empty($order_data['finishtime']) ? date('Y-m-d H:i:s',$order_data['finishtime']) : '',
                'sup_name' => $order_data['sup_name'],//下单店铺
                'delivery_type' => $delivery_type,//订单类型
                'send_type' => $order_data['delivery_type'],//配送类型，0：自提，1：商家配送
                'status' => $status,//订单状态：-1：已取消，0：待支付，1：已支付，2：已确认，3：已完成
                'order_all_price' => round(($order_data['price'] + $order_data['coupon_money']),2),//订单总额
                'coupon_money' => $order_data['coupon_money'],//优惠金额
                'price' => $order_data['price'],//实际付款金额
                'is_cancel' => $is_cancel,//是否可以取消订单，0：不可以取消订单，1：可以取消订单
                'goods_sum' => $goods_sum,//全部商品数量
                'is_dist' => $is_dist,//1:是经销商，0：不是
                'pick_code' => $order_data['pick_code'],//提货码
                'order_goods_arr' => $order_goods_arr,//商品数组
                'after_sale_id' => $order_data['after_sale_id'],//售后ID
            ];
            sdk_return($return_data,1,'success');
        }else{
            sdk_return('',6,'没有找到相应订单');
        }
    }

    /**
     * 新版c端订单列表
     * 2019年11月5日13:40:51
     * auth：maic
     */
    public function orderListC(){
        $param = $this->request->param();
        $user_openid = !empty($param['user_openid']) ? $param['user_openid'] : sdk_return('',6,'参数错误');//用户openID
        $user_openid = is_sns($user_openid);
        $show_status = !empty($param['show_status']) ? $param['show_status'] : 1;//1：全部，2：代付款，3：已付款，4：已完成，5：售后
        $page = !empty($param['page']) ? $param['page'] : 1;
        $pageSize = 10;
        $where = "a.openid = '{$user_openid}'";
        switch ($show_status){
            case '1':
                //1：全部
                break;
            case '2':
                //2：代付款
                $where .= ' and (a.status = 0 or a.status = 2)';
                break;
            case '3':
                //3：已付款，（只有普通店铺有已付款，孙宇店铺类型的已付款就是已完成，没有已付款状态）
                $where .= ' and a.status = 1 and a.order_type = 1';
                break;
            case '4':
                $where .= ' and ((a.status = 3 and a.order_type = 1) or ((a.status = 1 or a.status = 3) and a.order_type = 2) or a.status = -1)';
                //4：已完成，（普通店铺就是已完成，孙宇类型店铺支付即完成）
                break;
            case '5':
                //5：售后，（孙宇店铺类型支付成功即可售后，取消不可以售后）
                $return_data = $this->afterSaleOrder($user_openid,$page);
                sdk_return($return_data,1,'success');
                break;
        }
        $order_data = Db::connect('db_mini_mall')->table('ims_ewei_shop_order')->alias('a')->leftJoin('ims_yd_supplier b','a.supplier_id = b.id')->field('a.id,a.ordersn,a.createtime,a.delivery_type,a.order_type,a.pick_code,a.supplier_id,b.name as sup_name,a.price,a.status,b.is_dist,a.after_sale_id')->where($where)->order('a.createtime','desc')->paginate($pageSize)->toArray();
        $return_data = [];
        if(!empty($order_data['data'])){
            $order_data_arr = $order_data['data'];
            foreach ($order_data_arr as $key => $value){
                $order_time = $value['createtime'];
                $value['createtime'] = !empty($order_time) ? date('Y-m-d H:i:s',$order_time) : '----';
                //查询商品信息
                $one_order_goods = Db::connect('db_mini_mall')->table('ims_ewei_shop_order_goods')->alias('a')->leftJoin('ims_ewei_shop_goods b','a.goodsid = b.id')->where('a.total > 0 and a.orderid = '.$value['id'])->field('b.thumb')->order('a.total','desc')->select();
                $value['order_goods_sum'] = count($one_order_goods);//商品款数
                if(count($one_order_goods) > 0){
                    $value['order_goods'] = array_slice($one_order_goods,0,3);//商品数组
                }else{
                    $value['order_goods'] = [];
                }
                $value['is_cancel'] = 0;//0:不可以取消，1：可以取消
                //查询订单状态，（主要区分孙宇店铺类型）
                //订单状态：-1：取消订单，0：待支付，1：已支付，3：已完成
                if($value['order_type'] == 2){
                    //货到付款类型，孙宇店铺类型
                    //是否可以取消
                    if($value['status'] == 0 || $value['status'] == 2){
                        $out_time = $order_time + ((60*60)*2);
                        if($out_time > time()){
                            $value['is_cancel'] = 1;
                        }
                        $value['status'] = 0;
                    }
                    //订单状态
                    if($value['status'] == 1){
                        $value['status'] = 3;
                    }
                }
                $return_data[] = $value;
            }
        }
        sdk_return($return_data,1,'success');
    }

    /**
     * 售后订单列表
     * auth：maic
     * @param string $user_openid
     * @param int $page
     * @return array
     * @throws Exception
     */
    private function afterSaleOrder($user_openid = '',$page = 1){
        $user_openid = is_sns($user_openid);
        $pageSize = 10;
//        $three_day = 60 * 60 * 24 * 3;
        $three_day = 60 * 2;
        $w_time = time() - $three_day;
        $where = ' and a.finish_time > '.$w_time.' and a.finish_time <> 0';
        $after_sale_order = Db::connect('db_mini_mall')->table('ims_ewei_shop_order_after_sale')->alias('a')->leftJoin('ims_ewei_shop_order b','a.order_id = b.id')->where('a.open_id = "'.$user_openid.'" and (a.status = 1 or (a.status = 2 '.$where.'))')->field('a.id as after_sale_id,a.status as after_sale_status,b.id,b.ordersn,b.createtime,b.delivery_type,b.order_type,b.pick_code,b.supplier_id,b.price,b.status,b.after_sale_id')->order(['a.status'=>'asc','a.create_time'=>'desc'])->page($page,$pageSize)->select();
        $after_sale_order_return = [];
        if(!empty($after_sale_order)){
            $after_sale_order_list = $after_sale_order;
            foreach ($after_sale_order_list as $key => $value){
                $order_time = $value['createtime'];
                $value['createtime'] = !empty($order_time) ? date('Y-m-d H:i:s',$order_time) : '----';
                //查询商品信息
                $one_order_goods = Db::connect('db_mini_mall')->table('ims_ewei_shop_order_goods')->alias('a')->leftJoin('ims_ewei_shop_goods b','a.goodsid = b.id')->where('a.total > 0 and a.orderid = '.$value['id'])->field('b.thumb')->order('a.total','desc')->select();
                $value['order_goods_sum'] = count($one_order_goods);//商品款数
                if(count($one_order_goods) > 0){
                    $value['order_goods'] = array_slice($one_order_goods,0,3);//商品数组
                }else{
                    $value['order_goods'] = [];
                }
                $value['is_cancel'] = 0;//0:不可以取消，1：可以取消
                //查询订单状态，（主要区分孙宇店铺类型）
                //订单状态：-1：取消订单，0：待支付，1：已支付，3：已完成
                if($value['order_type'] == 2){
                    //货到付款类型，孙宇店铺类型
                    //是否可以取消
                    if($value['status'] == 0 || $value['status'] == 2){
                        $out_time = $order_time + ((60*60)*2);
                        if($out_time > time()){
                            $value['is_cancel'] = 1;
                        }
                        $value['status'] = 0;
                    }
                    //订单状态
                    if($value['status'] == 1){
                        $value['status'] = 3;
                    }
                }
                //查询店铺名称
                $sup_name_arr = Db::connect('db_mini_mall')->table('ims_yd_supplier')->where('id = '.$value['supplier_id'])->field('name,is_dist')->find();
                $value['sup_name'] = !empty($sup_name_arr['name']) ? $sup_name_arr['name'] : '';
                $value['is_dist'] = !empty($sup_name_arr['is_dist']) ? $sup_name_arr['is_dist'] : 0;
                $after_sale_order_return[] = $value;
            }
        }
        return $after_sale_order_return;
    }
}