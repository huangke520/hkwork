<?php
class TopClient
{
	public $appKey;

	public $secretKey;

	public $gatewayUrl = "http://erp18.jetm3.com/erpApi/api.php";//接口地址

	public $format = "json";

	public $connectTimeout;

	public $readTimeout;

	/** 是否打开入参check**/
	public $checkRequest = false;

	protected function generateSign($params)
	{
		$stringToBeSigned = $this->secretKey;
		$stringToBeSigned .= $this->getParamStr($params);
		$stringToBeSigned .= $this->secretKey;
		return strtoupper(md5($stringToBeSigned));
	}

	protected function getParamStr($arr)
	{
		ksort($arr);
		$str = '';
		foreach($arr as $item)
		{
			if(is_array($item)) {
				$str .= $this->getParamStr($item);	
			}
			else {
				$str .= $item;		
			}
		}
		return $str;
	}

	public function curl($url, $postFields = null)
	{
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_FAILONERROR, false);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		if ($this->readTimeout) 
		{
			curl_setopt($ch, CURLOPT_TIMEOUT, $this->readTimeout);
		}
		if ($this->connectTimeout) 
		{
			curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->connectTimeout);
		}
		//https 请求
		if(strlen($url) > 5 && strtolower(substr($url,0,5)) == "https" ) 
		{
			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
			curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
		}

		if (is_array($postFields) && 0 < count($postFields))
		{
			curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postFields));
		}
		$reponse = curl_exec($ch);
		if (curl_errno($ch))
		{
			throw new Exception(curl_error($ch),0);
		}
		else
		{
			$httpStatusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
			if (200 !== $httpStatusCode)
			{
				throw new Exception($reponse,$httpStatusCode);
			}
		}
		curl_close($ch);
		return $reponse;
	}

	public function execute($request, $session = null)
	{
		if($this->checkRequest) 
		{
			try {
				$request->check();
			} catch (Exception $e) {
				//$result->code = $e->getCode();
				//$result->msg = $e->getMessage();
				return $result;
			}
		}
		//组装系统参数
		$sysParams["appkey"] = $this->appKey;
		$sysParams["method"] = $request->getApiMethodName();
		$sysParams["timestamp"] = time();
		if (null != $session)
		{
			$sysParams["sessionkey"] = $session;
		}

		//获取业务参数
		$apiParams = $request->getApiParas();

		//签名
		$sysParams["sign"] = $this->generateSign(array_merge($apiParams, $sysParams));
		//系统参数放入GET请求串
		$requestUrl = $this->gatewayUrl . "?";
		$requestUrl .= http_build_query($sysParams);

		//发起HTTP请求
		try
		{
			$resp = $this->curl($requestUrl, $apiParams);
		}
		catch (Exception $e)
		{
			$result->code = $e->getCode();
			$result->msg = $e->getMessage();
			return $result;
		}

		//解析TOP返回结果
		$respWellFormed = false;
		if ("json" == $this->format)
		{
			$respObject = json_decode($resp, true);
			if (null !== $respObject)
			{
				$respWellFormed = true;
			}
		}
		
		//返回的HTTP文本不是标准JSON或者XML，记下错误日志
		if (false === $respWellFormed)
		{
			$result->code = 0;
			$result->msg = $resp;
			return $result;
		}
		return $respObject;
	}

	public function exec($paramsArray)
	{
		if (!isset($paramsArray["method"]))
		{
			trigger_error("No api name passed");
		}
		$inflector = new LtInflector;
		$inflector->conf["separator"] = ".";
		$requestClassName = ucfirst($inflector->camelize(substr($paramsArray["method"], 7))) . "Request";
		if (!class_exists($requestClassName))
		{
			trigger_error("No such api: " . $paramsArray["method"]);
		}

		$session = isset($paramsArray["session"]) ? $paramsArray["session"] : null;

		$req = new $requestClassName;
		foreach($paramsArray as $paraKey => $paraValue)
		{
			$inflector->conf["separator"] = "_";
			$setterMethodName = $inflector->camelize($paraKey);
			$inflector->conf["separator"] = ".";
			$setterMethodName = "set" . $inflector->camelize($setterMethodName);
			if (method_exists($req, $setterMethodName))
			{
				$req->$setterMethodName($paraValue);
			}
		}
		return $this->execute($req, $session);
	}
}